from flask import Blueprint, render_template, redirect, url_for, request, flash
from flask_login import login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import bcrypt
from .models import User, StudentGrade
from . import db

umis = Blueprint('umis', __name__)

@umis.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        user = User.query.filter_by(email=email).first()
        
        if user and check_password_hash(user.password, password):
            login_user(user)
            if user.is_admin:
                return redirect(url_for('main.view_admin_profile'))
            return redirect(url_for('main.view_student_profile'))
        else:
            flash('Invalid email or password')
    
    return render_template('login.html')

@umis.route('/signup')
def signup():
    return render_template('signup.html')

@umis.route('/signup', methods=['POST'])
def signup_post():
    email = request.form.get('email')
    nic = request.form.get('nic')
    reg_no = request.form.get('reg_No')
    password = request.form.get('password')
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

    # Validate student number
    if not StudentGrade.query.filter_by(studentNo=student_no).first():
        flash('Invalid Student Number')
        return redirect(url_for('umis.signup'))

    # Validate email domain
    if not email.endswith('@stu.kln.ac.lk'):
        flash('Email must be a university email address (@stu.kln.ac.lk)')
        return redirect(url_for('umis.signup'))

    # Check if user exists
    if User.query.filter_by(email=email).first():
        flash('Email address already exists')
        return redirect(url_for('umis.signup'))

    # Create new user
    new_user = User(email=email, nic=nic, reg_no=reg_no, password=hashed_password)

    db.session.add(new_user)
    db.session.commit()

    return redirect(url_for('umis.login'))

@umis.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('umis.login'))

# Create admin account
@umis.cli.command('create-admin')
def create_admin():
    email = 'laalitha@kln.ac.lk'
    nic = '782900846V'
    reg_no = '02578'
    password = 'ConFct@4312'
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    
    if User.query.filter_by(email=email).first() is None:
        new_user = User(email=email, nic=nic, reg_no=reg_no, password=hashed_password, is_admin=True)
        db.session.add(new_user)
        db.session.commit()
        print('Admin account created.')
    else:
        print('Admin account already exists.')
